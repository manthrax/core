
float neb(vec3 npos,float scl){
    vec3 posn2 = npos * (uScale*scl);
    return  pow(min(1.0, nebula(posn2 + (uOffset*scl* uIntensity))),uFalloff);
}

float neeb(vec3 npos,float offset){
    float n1=neb(npos*(50.0+offset),0.1);
    float n2=neb(npos*(32.0+offset),10.2);
    return max(0.0,min(n1,n2)-0.13);
}

vec3 swoop1(vec3 npos) {
    return vec3(neb(npos,1.0),0.0,0.0);
}

vec3 swoop2(vec3 npos) {
    vec3 col1 = uColor*neb(npos,1.0);
    vec3 col2 = (vec3(1)-uColor)*neb(npos,1.23);
    vec3 col3 = (vec3(1)-col2).bgr*neb(npos,0.9);
    vec3 col4 = (col1+col2.bgr+col3.gbr)*0.2;
    return vec3(col4);
}


vec3 swoop3(vec3 npos) {
    float n1=neb(npos*10.0,1.0);
    float n2=neb(npos*7.7,0.8);
    float n3=neb(npos*8.7,1.23);
    float n4=neb(npos*3.7,0.3)+(n1*-0.5);
    return vec3(min(vec3(n1,n2,n3+n4),vec3(n4)));
}


vec3 swoop4(vec3 npos) {
    float n1 = neeb(npos,20.0);
    float n2 = neeb(npos,35.0);
    float n3 = neeb(npos,17.0);
    n1 = (n1+(n2*0.5)+(n3*0.25));
    n2 = (n2+(n3*0.5)+(n1*0.25));
    return vec3(n1*vec3(0.3,0.0,0.7)+n2*vec3(0.9,1.6,0.3)+n3*vec3(0.7,0.3,0.9));
}

void main(){
    vec3 npos = normalize(vPos);
    gl_FragColor.rgb =max(min((swoop3(npos)+(swoop2(npos)*0.5)+(swoop1(npos)*0.25)),1.0),0.0);
}
