

// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/
float field(in vec3 p) {
	float strength = 7. + .03 * log(1.e-6 + fract(sin(uTime) * 4373.11));
	float accum = 0.;
	float prev = 0.;
	float tw = 0.;
	for (int i = 0; i < 32; ++i) {
		float mag = dot(p, p);
		p = abs(p) / mag + vec3(-.51, -.4, -1.3);
		float w = exp(-float(i) / 7.);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
	}
	return max(0., 5. * accum / tw - .2);
	return 1.0;
}

vec3 nrand3( vec2 co )
{
	vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );
	vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );
	vec3 c = mix(a, b, 0.5);
	return c;
}

vec3 swamp(vec3 npos) {

    vec3 baseColor=uColor;
    float brightness=2.5;//uIntensity;
    float scale=3.116;//uScale;
    float time=uTime;


    vec3 pos = normalize(npos)/scale;
    
	vec3 p = vec3(pos / 4.) + vec3(2., -1.3, -1.);
	p += 0.18 * vec3(sin(time / 16.), sin(time / 12.),  sin(time / 128.));
	
	vec3 p2 = vec3(pos / (4.+sin(time*0.11)*0.2+0.2+sin(time*0.15)*0.3+0.4)) + vec3(2., -1.3, -1.);
	p2 += 0.2 * vec3(sin(time / 16.), sin(time / 12.),  sin(time / 128.));

	vec3 p3 = vec3(pos / (4.+sin(time*0.14)*0.23+0.23+sin(time*0.19)*0.31+0.31)) + vec3(2., -1.3, -1.);
	p3 += 0.25 * vec3(sin(time / 16.), sin(time / 12.),  sin(time / 128.));
	
	float t = field(p);
	float t2 = field(p2);
	float t3 = field(p3);

	float v = (1. - exp((abs(pos.x) - 1.) * 6.)) * (1. - exp((abs(pos.y) - 1.) * 6.)) * (1. - exp((abs(pos.z) - 1.) * 6.));
	
	vec3 c1 = mix(.9, 1., v) * vec3(1.8 * t * t * t, 1.4 * t * t, t);
	vec3 c2 = mix(.8, 1., v) * vec3(1.9 * t2 * t2 * t2, 1.8 * t2 * t2, t2);
	vec3 c3 = mix(.8, 1., v) * vec3(1.4 * t3 * t3 * t3, 1.8 * t3 * t3, t3);
	c1 *= baseColor;
	c2 *= baseColor;
	c3 *= baseColor;
	
	
	return brightness * vec3(c1*0.7 + c2*0.9 + c3*0.1);
	
}

float neb(vec3 npos,float scl){
    vec3 posn2 = npos * (uScale*scl);
    return  pow(abs(min(1.0, nebula(posn2 + (uOffset*scl* uIntensity)))),uFalloff);
}

float neeb(vec3 npos,float offset){
    float n1=neb(npos*(50.0+offset),0.1);
    float n2=neb(npos*(32.0+offset),10.2);
    return max(0.0,min(n1,n2)-0.13);
}

vec3 swoop1(vec3 npos) {
    return vec3(neb(npos,1.0),0.0,0.0);
}

vec3 swoop2(vec3 npos) {
    vec3 col1 = uColor*neb(npos,1.0);
    vec3 col2 = (vec3(1)-uColor)*neb(npos,1.23);
    vec3 col3 = (vec3(1)-col2).bgr*neb(npos,0.9);
    vec3 col4 = (col1+col2.bgr+col3.gbr)*0.2;
    return vec3(col4);
}


vec3 swoop3(vec3 npos) {
    float n1=neb(npos*10.0,1.0);
    float n2=neb(npos*7.7,0.8);
    float n3=neb(npos*8.7,1.23);
    float n4=neb(npos*3.7,0.3)+(n1*-0.5);
    return vec3(min(vec3(n1,n2,n3+n4),vec3(n4)));
}


vec3 swoop4(vec3 npos) {
    float n1 = neeb(npos,20.0);
    float n2 = neeb(npos,35.0);
    float n3 = neeb(npos,17.0);
    n1 = (n1+(n2*0.5)+(n3*0.25));
    n2 = (n2+(n3*0.5)+(n1*0.25));
    return vec3(n1*vec3(0.3,0.0,0.7)+n2*vec3(0.9,1.6,0.3)+n3*vec3(0.7,0.3,0.9));
}

vec3 mswoop(vec3 npos){
    return max(min((swoop3(npos)+(swoop2(npos)*0.5)+(swoop1(npos)*0.25)),1.0),0.0);
}

void main(){
    vec3 npos = normalize(vPos);
   gl_FragColor = vec4(mswoop(npos)*swamp(npos)*10.5,1.0);
   //gl_FragColor.a = 1.;
    //gl_FragColor = vec4(max(mswoop(),swamp())*0.5,1.0);
	//gl_FragColor = vec4(1.,0.,0.,1.);
}
